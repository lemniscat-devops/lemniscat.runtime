tasks:
- task: terraform
  displayName: 'Terraform init (workspace just created)'
  condition: '"${{ workspaceExist }}" == "false"'
  steps:
    - pre
    - run
    - decom
  parameters:
    action: init
    tfPath: C:\DEV\Onepoint\Smartplace\Product.AzureStorage\src\terraform
    backend:
      backend_type: azurerm
      storage_account_name: ${{ workspace.storage_account_name }}
      container_name: ${{ workspace.container_name }}
      arm_access_key: ${{ workspace.arm_access_key }}
      key: ${{ productInstanceName }}.${{ rgTags.product_name }}.tfstate

- task: terraform
  displayName: 'Terraform init (workspace already exist)'
  condition: '"${{ workspaceExist }}" == "true"'
  steps:
    - pre
    - run
    - decom
  parameters:
    action: init
    tfPath: C:\DEV\Onepoint\Smartplace\Product.AzureStorage\src\terraform
    backend:
      backend_type: azurerm
      storage_account_name: ${{ nc.workspace.stName }}
      container_name: tfstates
      key: ${{ productInstanceName }}.${{ rgTags.product_name }}.tfstate

- task: terraform
  displayName: 'Terraform plan'
  steps:
    - pre
  parameters:
    action: plan
    tfPath: C:\DEV\Onepoint\Smartplace\Product.AzureStorage\src\terraform
    tfVarFile: C:\DEV\Onepoint\lemniscat\github\lemniscat.runtime\sample\variables.tfvars.json

- task: terraform
  displayName: 'Terraform apply'
  steps:
    - run
  parameters:
    action: apply
    tfPath: C:\DEV\Onepoint\Smartplace\Product.AzureStorage\src\terraform

- task: azurecli
  displayName: 'Set azure rbac'
  steps:
    - run
  parameters:
    scripttype: pwsh
    commandtype: inline
    script: | 
      $result = Get-Location
      $variables = Get-Content "$($result.path)/vars.json" | ConvertFrom-Json -Depth 100
      foreach ($rbac in $variables.'product.rbac') {
          $assignmentScope = $rbac.scope
          $principalName = $rbac.principalName
          $principalType = $rbac.principalType
          $roleDefinitionName = $rbac.role
          
          & "C:\DEV\Onepoint\Smartplace\Pipelines.Templates\steps\azure\rbac_azure.ps1" -assignmentScope "$assignmentScope" -principalName "$principalName" -principalType "$principalType" -roleDefinitionName "$roleDefinitionName"
      }
      Write-Host "Rbac apply with success!"
    storeVariablesInFile:
      format: json
      withSecrets: false