name: Publish Python 🐍 distribution 📦 to PyPI and TestPyPI

on: push

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true
        configFilePath: ./gitversion.yml
    - name: Set version in version.py
      shell: pwsh
      run: |
        $data = Get-Content -Path .\src\lemniscat\runtime\version.py -Raw
        $data = $data -replace "__version__ = '0.0.1'", "__version__ = '$($env:GitVersion_MajorMinorPatch)'"
        $release_date = Get-Date -Format "yyyy-MM-dd"
        $data = $data -replace "__release_date__ = '2023-12-31'", "__release_date__ = '$release_date'"
        $data | Set-Content -Path .\src\lemniscat\runtime\version.py
    - name: Set version in pyproject.toml for main branch
      shell: pwsh
      if: github.ref == 'refs/heads/main'
      run: |
        $data = Get-Content -Path .\pyproject.toml -Raw
        $data = $data -replace 'version = "0.0.1"', "version = ""$($env:GitVersion_MajorMinorPatch)"""
        $release_date = Get-Date -Format "yyyy-MM-dd"
        $data = $data -replace "__release_date__ = '2023-12-31'", "__release_date__ = '$release_date'"
        $data | Set-Content -Path .\pyproject.toml
    - name: Set version in pyproject.toml for feat/fix branch
      shell: pwsh
      if: startsWith(github.ref, 'refs/heads/feat/') || startsWith(github.ref, 'refs/heads/fix/')
      run: |
        $data = Get-Content -Path .\pyproject.toml -Raw
        $data = $data -replace 'version = "0.0.1"', "version = ""$($env:GitVersion_MajorMinorPatch).$($env:GitVersion_CommitsSinceVersionSource)"""
        $data | Set-Content -Path .\pyproject.toml
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Add git release tag
      id: tag
      if: github.ref == 'refs/heads/main' # only tag on main branch
      run: | 
        git config --global user.email "runner@github.com"
        git config --global user.name "Github Runner"
        git tag -a ${{ env.GitVersion_SemVer }} -m "Release ${{ env.GitVersion_SemVer }}"
        git push --tags
        echo "VERSION=${{ env.GitVersion_SemVer }}" >> $GITHUB_OUTPUT

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    if: github.ref == 'refs/heads/main' # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/lemniscat.runtime
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    - build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ needs.build.outputs.version }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ needs.build.outputs.version }}' dist/**
        --repo '${{ github.repository }}'

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    if: startsWith(github.ref, 'refs/heads/feat/') || startsWith(github.ref, 'refs/heads/fix/')
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/lemniscat.runtime

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true